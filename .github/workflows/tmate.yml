name: ‚ö° VPS & Bot Manager
on:
  schedule:
    - cron: '0 */6 * * *'  # Auto restart every 6 hours
  workflow_dispatch:
    inputs:
      bot_repo_url:
        description: 'Bot Repository URL to clone'
        required: false
        default: 'https://github.com/Demomkumuro3/1'
  repository_dispatch:
    types: [create-vps]

jobs:
  vps-manager:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      VPS_NAME: ${{ github.event.client_payload.vps_name || 'auto-vps' }}
      BOT_REPO_URL: ${{ github.event.inputs.bot_repo_url || github.event.client_payload.bot_repo_url || 'https://github.com/Demomkumuro3/1' }}
    continue-on-error: true
    steps:
    - name: ‚¨áÔ∏è Checkout Repository
      uses: actions/checkout@v3
      
    - name: üîç System Information
      run: |
        echo "üñ•Ô∏è System Information:"
        echo "OS: $(uname -a)"
        echo "CPU: $(nproc) cores"
        echo "Memory: $(free -h)"
        echo "Disk: $(df -h /)"
        echo "Python: $(python3 --version)"
        echo "Node.js: $(node --version)"
        echo "Git: $(git --version)"
        echo "‚è∞ Started at: $(date)"
        
    - name: ‚öôÔ∏è Setup Development Environment
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: üêç Setup Python Environment
      run: |
        echo "üîß Setting up Python environment..."
        python3 -m pip install --upgrade pip
        pip install requests psutil aiohttp paramiko rich colorama
        echo "‚úÖ Python environment ready"
        
    - name: üì¶ Install Bot Dependencies & Setup
      run: |
        echo "üîß Installing system dependencies..."
        sudo apt update -y
        sudo apt install -y curl wget git nano htop
        
        echo "ü§ñ Bot Repository URL: $BOT_REPO_URL"
        echo "üì• Cloning bot repository: $BOT_REPO_URL"

        if git clone "$BOT_REPO_URL" bot; then
          echo "‚úÖ Successfully cloned: $BOT_REPO_URL"
        else
          echo "‚ùå Failed to clone: $BOT_REPO_URL"
          echo "üîÑ Trying default repository..."
          if git clone "https://github.com/Demomkumuro3/1" bot; then
            echo "‚úÖ Default repository cloned successfully"
          else
            echo "‚ùå Failed to clone default repository"
            exit 1
          fi
        fi

        if [ -d "bot" ]; then
          cd bot
        else
          echo "‚ùå Bot directory not found"
          exit 1
        fi
        
        echo "üì¶ Installing Python bot dependencies..."
        if pip install telebot psutil requests aiohttp paramiko rich pyTelegramBotAPI colorama; then
          echo "‚úÖ Python dependencies installed successfully"
        else
          echo "‚ö†Ô∏è Some Python dependencies may have failed to install"
        fi

        echo "üì¶ Installing Node.js dependencies..."
        if npm install user-agents colors hpack socks; then
          echo "‚úÖ Node.js dependencies installed successfully"
        else
          echo "‚ö†Ô∏è Some Node.js dependencies may have failed to install"
        fi
        
        # Try to find the main bot file
        if [ -f "bot.py" ]; then
          BOT_FILE="bot.py"
        elif [ -f "main.py" ]; then
          BOT_FILE="main.py"
        elif [ -f "index.py" ]; then
          BOT_FILE="index.py"
        elif [ -f "app.py" ]; then
          BOT_FILE="app.py"
        else
          echo "‚ö†Ô∏è No main bot file found, trying bot.py anyway"
          BOT_FILE="bot.py"
        fi

        echo "üöÄ Starting bot with file: $BOT_FILE"
        if [ -f "$BOT_FILE" ]; then
          nohup python "$BOT_FILE" > bot.log 2>&1 &
          BOT_PID=$!
          echo $BOT_PID > bot.pid

          # Wait a moment and check if bot is still running
          sleep 2
          if kill -0 $BOT_PID 2>/dev/null; then
            echo "‚úÖ Bot started successfully!"
            echo "üìã Bot PID: $BOT_PID"
          else
            echo "‚ö†Ô∏è Bot may have failed to start, check bot.log"
            echo "üìã Bot PID: $BOT_PID (may be dead)"
          fi
        else
          echo "‚ùå Bot file $BOT_FILE not found!"
          echo "üìã Bot PID: N/A"
        fi

        echo "üìÑ Bot log: bot.log"
        echo "üîó Bot Repository: $BOT_REPO_URL"
        echo "üìù Bot File: $BOT_FILE"
        
    - name: üõ†Ô∏è Setup VPS Tools & Scripts
      run: |
        echo "üõ†Ô∏è Setting up VPS management tools..."
        
        # Create useful aliases
        echo 'alias ll="ls -la"' >> ~/.bashrc
        echo 'alias la="ls -A"' >> ~/.bashrc
        echo 'alias l="ls -CF"' >> ~/.bashrc
        echo 'alias ..="cd .."' >> ~/.bashrc
        echo 'alias ...="cd ../.."' >> ~/.bashrc
        echo 'alias grep="grep --color=auto"' >> ~/.bashrc
        
        # Create bot management script
        cat > manage_bot.sh << 'EOF'
        #!/bin/bash

        # Auto-detect bot file
        detect_bot_file() {
          if [ -f "bot.py" ]; then
            echo "bot.py"
          elif [ -f "main.py" ]; then
            echo "main.py"
          elif [ -f "index.py" ]; then
            echo "index.py"
          elif [ -f "app.py" ]; then
            echo "app.py"
          else
            echo "bot.py"
          fi
        }

        case "$1" in
          start)
            cd bot
            BOT_FILE=$(detect_bot_file)
            nohup python "$BOT_FILE" > bot.log 2>&1 &
            echo $! > bot.pid
            echo "üöÄ Bot started with PID: $(cat bot.pid) using file: $BOT_FILE"
            ;;
          stop)
            if [ -f bot.pid ]; then
              kill $(cat bot.pid) 2>/dev/null
              rm -f bot.pid
              echo "üõë Bot stopped"
            else
              echo "‚ùå Bot PID file not found"
            fi
            ;;
          status)
            if [ -f bot.pid ] && kill -0 $(cat bot.pid) 2>/dev/null; then
              echo "üü¢ Bot is running (PID: $(cat bot.pid))"
            else
              echo "üî¥ Bot is not running"
            fi
            ;;
          log)
            tail -f bot/bot.log
            ;;
          *)
            echo "Usage: $0 {start|stop|status|log}"
            ;;
        esac
        EOF
        chmod +x manage_bot.sh
        
        echo "‚úÖ VPS tools setup completed!"
        
    - name: üöÄ Start VPS Session (tmate)
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 360
      with:
        limit-access-to-actor: false
        sudo: true

    - name: ‚è≥ Keep VPS & Bot Alive
      run: |
        echo "üü¢ VPS and Bot are running..."
        echo "‚è∞ Session started at: $(date)"
        echo "üîó Repository: ${{ github.repository }}"
        echo "üè∑Ô∏è Workflow: ${{ github.workflow }}"
        echo "üÜî Run ID: ${{ github.run_id }}"

        # Monitor bot status and keep session alive
        for i in $(seq 1 360); do
          echo "üü¢ Running minute $i/360 - $(date)"

          # Check bot status every 30 minutes
          if [ $((i % 30)) -eq 0 ]; then
            if [ -f bot/bot.pid ] && kill -0 $(cat bot/bot.pid) 2>/dev/null; then
              echo "‚úÖ Bot is still running (PID: $(cat bot/bot.pid))"
            else
              echo "‚ö†Ô∏è Bot may have stopped, attempting restart..."
              cd bot

              # Auto-detect bot file for restart
              if [ -f "bot.py" ]; then
                BOT_FILE="bot.py"
              elif [ -f "main.py" ]; then
                BOT_FILE="main.py"
              elif [ -f "index.py" ]; then
                BOT_FILE="index.py"
              elif [ -f "app.py" ]; then
                BOT_FILE="app.py"
              else
                BOT_FILE="bot.py"
              fi

              nohup python "$BOT_FILE" > bot.log 2>&1 &
              echo $! > bot.pid
              echo "üîÑ Bot restarted with PID: $(cat bot/bot.pid) using file: $BOT_FILE"
              cd ..
            fi
          fi

          sleep 60
        done

    - name: üîÅ Auto Restart Workflow
      if: always()
      run: |
        echo "üîÑ Session completed, triggering auto-restart..."
        echo "‚è∞ Ended at: $(date)"

        # Cleanup before restart
        if [ -f bot/bot.pid ]; then
          echo "üßπ Cleaning up bot process..."
          kill $(cat bot/bot.pid) 2>/dev/null || true
          rm -f bot/bot.pid
        fi

        # Trigger new workflow with same bot repository
        curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d "{\"event_type\": \"create-vps\", \"client_payload\": {\"vps_name\": \"auto-restart-${{ github.run_number }}\", \"bot_repo_url\": \"$BOT_REPO_URL\"}}" \
          || echo "‚ö†Ô∏è Failed to trigger auto-restart"

        echo "‚úÖ Auto-restart triggered successfully!"